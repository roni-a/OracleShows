#!/usr/bin/ksh
#

#============================================
#
Usage () {
echo  "\n\n\tUSAGE: `basename $0` -[ u | s ] <user_name> [ -j JOB ]\n\n"
echo  "\tJOBS:\n"
echo  "\t\t ViewJobs\n"
echo  "\t\t RuningJobs\n"
echo  "\t\t SessRunJobs\n"
echo  "\t\t CheckRefGroups\n\n"
}

#=============================================
#
SetEnv () {
export ORCLE_HOME=`grep -i $ORACLE_SID /etc/oratab | awk -F: '{print $2}'`
export SQLPLUS=${ORACLE_HOME}/bin/sqlplus 
}

#==============================================
#
CheckRefGroups () {
$SQLPLUS -s / << *EOF*
set pages 9999 line 200 echo off verify off feedback off

col refname  			for a20
col refowner 			for a20
col ref_make_user for a160
col ref_child     for a160

prompt

SELECT refname, refowner, ref_make_user
FROM sys.ku\$_refgroup_view;

SELECT refname, refowner, ref_child
FROM sys.ku\$_refgroup_view;

prompt
*EOF*
}

#==============================================
#
CheckJobs () {
$SQLPLUS -s / << *EOF*
set pages 9999 line 400 echo off verify off feedback off

col what format a55
col job for 9999
col failures for 99 head "F|a|i|l"
col broken head "B|r|o|k"
col total_time for 999,999 head "Total|Time|Sec."

prompt
prompt RUN:        exec   dbms_refresh.refresh('<name>')

SELECT job,
$REM1  substr(substr(what,36),0,length(what)-39) what,
$REM2  DECODE(SUBSTR(what,0,12),'dbms_refresh',substr(substr(what,27+length(UPPER('$USER'))),0,length(what)-(30+length(UPPER('$USER')))),what) what,
       last_date,
--       last_sec,failures,broken,total_time/100 total_time,this_date,this_sec,next_date,next_sec 
       failures,broken,total_time/100 total_time,this_date,next_date
FROM   dba_jobs 
-- WHERE  SCHEMA_USER = UPPER('$USER')
WHERE  SCHEMA_USER LIKE UPPER('$USER')
ORDER  BY last_date,last_sec
/

prompt
*EOF*
}

#==============================================
#
ViewJobs () {
$SQLPLUS -s / << *EOF*
set pages 9999 line 400 echo off verify off feedback off

PROMPT Viewing scheduled dbms_jobs
--
-- When looking at what jobs have been scheduled, there is really only one view that you need to go to. The dba_jobs view contains all of the information you need, to see what has been scheduled, when they were last run, and if they are currently running. Use the following simple script to take a look. Bear with me on the sub-select, I will build on this query as we go on in the presentation.
--
-- scheduled_dbms_jobs.sql

set linesize 250
col log_user       for a10
col job            for 9999999  head 'Job'
col broken         for a1       head 'B'
col failures       for 99       head "fail"
col last_date      for a18      head 'Last|Date'
col this_date      for a18      head 'This|Date'
col next_date      for a18      head 'Next|Date'
col interval       for 999999.000 head 'Run|Interval'
col what           for a60

select j.log_user,
     j.job,
     j.broken,
     j.failures,
     j.last_date||':'||j.last_sec last_date,
     j.this_date||':'||j.this_sec this_date,
     j.next_date||':'||j.next_sec next_date,
     j.next_date - j.last_date interval,
     j.what
from (select dj.LOG_USER, dj.JOB, dj.BROKEN, dj.FAILURES,
             dj.LAST_DATE, dj.LAST_SEC, dj.THIS_DATE, dj.THIS_SEC,
             dj.NEXT_DATE, dj.NEXT_SEC, dj.INTERVAL, dj.WHAT
        from dba_jobs dj
       where dj.LOG_USER like upper('$USER')) j;
prompt
*EOF*
}

#==============================================
#
RuningJobs () {
$SQLPLUS -s / << *EOF*
set pages 9999 line 400 echo off verify off feedback off

PROMPT What Jobs are Actually Running
--
-- A simple join to the dba_jobs_running view will give us a good handle on the scheduled jobs that are actually running at this time. This is done by a simple join through the job number. The new column of interest returned here is the sid which is the identifier of the process that is currently executing the job.

-- running_jobs.sql

set linesize 250
col sid            for 9999     head 'Session|ID'
col log_user       for a10
col job            for 9999999  head 'Job'
col broken         for a1       head 'B'
col failures       for 99       head "fail"
col last_date      for a18      head 'Last|Date'
col this_date      for a18      head 'This|Date'
col next_date      for a18      head 'Next|Date'
col interval       for 999999.000 head 'Run|Interval'
col what           for a60
select j.sid,
       j.log_user,
       j.job,
       j.broken,
       j.failures,
       j.last_date||':'||j.last_sec last_date,
       j.this_date||':'||j.this_sec this_date,
       j.next_date||':'||j.next_sec next_date,
       j.next_date - j.last_date interval,
       j.what
from (select djr.SID,
             dj.LOG_USER, dj.JOB, dj.BROKEN, dj.FAILURES,
             dj.LAST_DATE, dj.LAST_SEC, dj.THIS_DATE, dj.THIS_SEC,
             dj.NEXT_DATE, dj.NEXT_SEC, dj.INTERVAL, dj.WHAT
        from dba_jobs dj, dba_jobs_running djr
       where dj.job = djr.job 
         and dj.LOG_USER like upper('$USER')) j;
prompt
*EOF*
}

#==============================================
#
SessRunJobs () {
$SQLPLUS -s / << *EOF*
set pages 9999 line 400 echo off verify off feedback off

PROMPT What Sessions are Running the Jobs
--
-- Now that we have determined which jobs are currently running, we need to find which Oracle session and operating system process is accessing them. This is done through first joining v$process to v$session by way of paddr and addr which is the address of the processs that owns the sessions, and then joining the results back to the jobs running through the sid value. The new columns returned in our query are spid which is the operating system process identifier and serial# which is the session serial number.

-- session_jobs.sql

set linesize 250
col sid            for 9999     head 'Session|ID'
col spid                        head 'O/S|Process|ID'
col serial#        for 9999999  head 'Session|Serial#'
col log_user       for a10
col job            for 9999999  head 'Job'
col broken         for a1       head 'B'
col failures       for 99       head "fail"
col last_date      for a18      head 'Last|Date'
col this_date      for a18      head 'This|Date'
col next_date      for a18      head 'Next|Date'
col interval       for 999999.000 head 'Run|Interval'
col what           for a60
select j.sid,
s.spid,
s.serial#,
       j.log_user,
       j.job,
       j.broken,
       j.failures,
       j.last_date||':'||j.last_sec last_date,
       j.this_date||':'||j.this_sec this_date,
       j.next_date||':'||j.next_sec next_date,
       j.next_date - j.last_date interval,
       j.what
from (select djr.SID,
             dj.LOG_USER, dj.JOB, dj.BROKEN, dj.FAILURES,
             dj.LAST_DATE, dj.LAST_SEC, dj.THIS_DATE, dj.THIS_SEC,
             dj.NEXT_DATE, dj.NEXT_SEC, dj.INTERVAL, dj.WHAT
        from dba_jobs dj, dba_jobs_running djr
       where dj.job = djr.job 
         and dj.LOG_USER like upper('$USER')) j,
     (select p.spid, s.sid, s.serial#
          from v\$process p, v\$session s
         where p.addr  = s.paddr ) s
 where j.sid = s.sid;
prompt
*EOF*
}

#========================
# M A I N
if [ $# -eq 0 ]; then
   Usage
   exit 1
fi

USER=%
JOB=CheckJobs
REM1=''
REM2='--'
while getopts u:s:j: opt
do
    case "$opt" in
       u  )  USER="$OPTARG"
	           REM1='--'
	           REM2=''
	     ;;
       s  )  USER="$OPTARG"
             REM1=''
             REM2='--'
             ;;
       j  )  JOB="$OPTARG"
             REM1=''
             REM2='--'
             ;;
       * )  # unknown flag
             Usage
             exit 1             ;;
    esac
done
shift `expr $OPTIND - 1`

SetEnv $ORACLE_SID

# CheckJobs
echo $JOB
$JOB
